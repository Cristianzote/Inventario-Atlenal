@page "/product/create"
@inject NavigationManager navigationManager

@using Access.API;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Inventario.Pages.Layout;

<div class="pb-24 pt-8 bg-green-800">
    <div class="w-5/6 mx-auto bg-white p-6 rounded-lg shadow-md ring-2 ring-green-700">
        <h1 class="text-lg font-medium text-green-900 mb-4">Crear producto</h1>

        <!-- Product Name -->
        <div class="mb-6">
            <label for="name" class="block text-sm font-medium text-green-900 mb-1">Nombre del producto</label>
            <input @bind="product.name" type="text" id="name" name="name" class="w-full py-2 px-3 bg-gray-100 text-green-900 border border-green-300 rounded-md focus:outline-none focus:ring focus:ring-green-500">
        </div>

        <!-- Product Category (Select Dropdown) -->
        <div class="mb-6">
            <label for="category" class="block text-sm font-medium text-green-900 mb-1">Categoría</label>
            <select @bind="@product.category" id="category" name="category" class="w-full py-2 px-3 bg-gray-100 text-green-900 border border-green-300 rounded-md focus:outline-none focus:ring focus:ring-green-500">
                <option value="@((int)CategoryType.OTHER)">Otro</option>
                <option value="@((int)CategoryType.SODA)">Gaseosa</option>
                <option value="@((int)CategoryType.ALCOHOLIC)">Trago</option>
                <option value="@((int)CategoryType.DRINK)">Trago</option>
                <option value="@((int)CategoryType.SNACK)">Mekato</option>
            </select>
        </div>

        @for (int i = 0; i < presentationArray.Count(); i++)
        {
            var index = i;
            <label for="presentationName" class="block text-sm font-medium text-green-900 mb-1"></label>

            <div class="mb-6 border-b border-green-300 pb-4">

                <div class="w-full flex justify-between">
                    <h2 class="text-lg font-medium text-green-900 mb-4">Presentación @(index + 1)</h2>
                    <div class="flex justify-center">
                        <button @onclick="() => DeletePresentation(index)" type="submit" class="bg-red-400 inline-block bg-fuchsia-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md focus:outline-none focus:ring focus:ring-red-200 transition duration-300">Eliminar</button>
                    </div>
                </div>

                <!-- Name of Presentation -->
                <div class="mb-4">
                    <label for="presentationName" class="block text-sm font-medium text-green-900 mb-1">Nombre de la presentación</label>
                    <input type="text" id="presentationName" name="name" @bind="presentationArray[index].name" class="w-full py-2 px-3 bg-gray-100 text-green-900 border border-green-300 rounded-md focus:outline-none focus:ring focus:ring-green-500">
                </div>

                <!-- Income Price and Outcome Price (Combined) -->
                <div class="flex justify-between mb-4">
                    <div class="w-1/2 pr-2">
                        <label for="incomePrice" class="block text-sm font-medium text-green-900 mb-1">Precio de entrada</label>
                        <input type="number" id="incomePrice" name="incomePrice" @bind="@presentationArray[index].priceIncome" class="w-full py-2 px-3 bg-gray-100 text-green-900 border border-green-300 rounded-md focus:outline-none focus:ring focus:ring-green-500">
                    </div>
                    <div class="w-1/2 pl-2">
                        <label for="outcomePrice" class="block text-sm font-medium text-green-900 mb-1">Precio de salida</label>
                        <input type="number" id="outcomePrice" name="outcomePrice" @bind="@presentationArray[index].priceOutput" class="w-full py-2 px-3 bg-gray-100 text-green-900 border border-green-300 rounded-md focus:outline-none focus:ring focus:ring-green-500">
                    </div>
                </div>

                <!-- Detail Sale Switch -->
                <div>
                    <div class="flex items-center mb-4">
                        <label class="inline-flex items-center cursor-pointer">
                            <input type="checkbox" @bind="detailCheckbox[index]" class="sr-only peer">
                            <div class="relative w-11 h-6 bg-gray-100 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 dark:peer-focus:ring-green-800 rounded-full peer dark:bg-gray-200 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-green-600"></div>
                            <span class="ms-3 text-sm font-medium text-green-900">¿Presentación con venta menudeada?</span>
                        </label>
                    </div>

                   @if (detailCheckbox[i] == true)
                   {
                        <!-- Detail Count Input (Shown if Detail Sale Switch is checked) -->
                        <div class="flex items-center">
                            <label for="detailCount" class="text-sm font-medium text-green-900">Descartar una unidad cada </label>
                            <input type="number" id="detailCount" name="detailCount" @bind="@presentationArray[index].retailStockRatio" class="mx-2 w-16 py-2 px-3 bg-gray-100 text-green-900 border border-green-300 rounded-md focus:outline-none focus:ring focus:ring-green-500 ml-2">
                            <label for="detailCount" class="text-sm font-medium text-green-900"> ventas menudeadas</label>
                        </div>
                   }
                </div>


                <!-- Cover -->
                <div>
                    <div class="flex items-center mb-4">
                        <label class="inline-flex items-center cursor-pointer">
                            <input type="checkbox" @bind="cover[index]" class="sr-only peer">
                            <div class="relative w-11 h-6 bg-gray-100 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 dark:peer-focus:ring-green-800 rounded-full peer dark:bg-gray-200 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-green-600"></div>
                            <span class="ms-3 text-sm font-medium text-green-900">¿Cover?</span>
                        </label>
                    </div>

                    @if (cover[i] == true)
                    {
                        <div class="flex justify-between mb-4">
                            <div class="w-1/2 pr-2">
                                <label for="incomePrice" class="block text-sm font-medium text-green-900 mb-1">Salida</label>
                                <input type="number" id="incomePrice" name="incomePrice" @bind="@presentationArray[index].priceOutputCover" class="w-full py-2 px-3 bg-gray-100 text-green-900 border border-green-300 rounded-md focus:outline-none focus:ring focus:ring-green-500">
                            </div>
                            <div class="w-1/2 pl-2">
                                <label for="outcomePrice" class="block text-sm font-medium text-green-900 mb-1">Salida menudeada</label>
                                <input type="number" id="outcomePrice" name="outcomePrice" @bind="@presentationArray[index].priceRetailCover" class="w-full py-2 px-3 bg-gray-100 text-green-900 border border-green-300 rounded-md focus:outline-none focus:ring focus:ring-green-500">
                            </div>
                        </div>
                    }
                </div>

            </div>
        }

        <!-- Plus Button (to add more presentations) -->
        <div class="flex justify-center mb-6">
            <button @onclick="AddPresentation" type="button" class="bg-green-400 inline-block bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-full focus:outline-none focus:ring focus:ring-green-200 transition duration-300">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
            </button>
        </div>

        <!-- Submit and Cancel Buttons -->
        <div class="flex justify-end">
            <button @onclick="()=>CreateProduct(presentationArray, detailCheckbox)" type="submit" class="bg-green-400 inline-block bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md focus:outline-none focus:ring focus:ring-green-200 transition duration-300 mr-4">Crear</button>
            <button @onclick="CancelCreation" type="button" class="bg-red-400 inline-block bg-fuchsia-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md focus:outline-none focus:ring focus:ring-red-200 transition duration-300">Cancelar</button>
        </div>
    </div>
</div>

<style>
    body{
        background-color: #166534;
    }
</style>

<SwalToast @ref=swalToast />
@code {
    Inventario.Pages.Layout.SwalToast swalToast;
    Product product = new Product();
    Presentation[] presentationArray = Array.Empty<Presentation>();
    bool[] detailCheckbox = Array.Empty<bool>();
    bool[] cover = Array.Empty<bool>();

    protected void AddPresentation()
    {
        Presentation NewPresentation = new Presentation
            {
                priceIncome = 1,
                priceOutput = 1,
                retailStockRatio = 1,
                priceRetail = 1,
                description = string.Empty
            };

        // Add the new presentation to the array
        presentationArray = presentationArray.Append(NewPresentation).ToArray();

        // Resize the arrays and maintain existing values
        ResizeArray(presentationArray);
    }

    protected void ToggleDetail(int i)
    {
        if (i >= 0 && i < detailCheckbox.Length)
        {
            detailCheckbox[i] = !detailCheckbox[i];
        }
    }

    protected void ToggleCover(int i)
    {
        if (i >= 0 && i < cover.Length)
        {
            cover[i] = !cover[i];
        }
    }

    protected void ResizeArray(Presentation[] presentations)
    {
        // Preserve existing values for detailCheckbox
        bool[] newDetailCheckbox = new bool[presentations.Length];
        for (int i = 0; i < presentations.Length; i++)
        {
            if (i < detailCheckbox.Length)
            {
                newDetailCheckbox[i] = detailCheckbox[i];
            }
            else
            {
                // Initialize new entries
                newDetailCheckbox[i] = presentations[i].retailStockRatio != 1 && presentations[i].retailStockRatio != 0;
            }
        }
        detailCheckbox = newDetailCheckbox;

        // Preserve existing values for cover
        bool[] newCover = new bool[presentations.Length];
        for (int i = 0; i < presentations.Length; i++)
        {
            if (i < cover.Length)
            {
                newCover[i] = cover[i];
            }
            else
            {
                // Initialize new entries
                newCover[i] = false;
            }
        }
        cover = newCover;
    }

    protected void DeletePresentation(int Id)
    {
        if (Id >= 0 && Id < presentationArray.Length)
        {
            var presentationsList = presentationArray.ToList();
            presentationsList.RemoveAt(Id);
            presentationArray = presentationsList.ToArray();

            ResizeArray(presentationArray);
        }
    }

    private async Task CreateProduct(Presentation[] presentationArray, bool[] detailCheckbox)
    {
        if (product.name == null)
        {
            await swalToast.ToggleToast(SwalToast.Icon.warning, SwalToast.FieldMessages.Name);
        }
        else if (product.category == 0)
        {
            await swalToast.ToggleToast(SwalToast.Icon.warning, SwalToast.FieldMessages.Category);
        }
        else
        {
            var options = new JsonSerializerOptions
                {
                    ReferenceHandler = ReferenceHandler.Preserve,
                    WriteIndented = true
                };

            try
            {
                // Build transaction body
                product.presentations = presentationArray.ToList();
                product.description = string.Empty;
                product.image = string.Empty;

                // Serialize the transaction object to JSON
                var jsonTransaction = JsonSerializer.Serialize(product, options);
                var content = new StringContent(jsonTransaction, System.Text.Encoding.UTF8, "application/json");

                // Make petition
                HttpClient client = new HttpClient();
                HttpResponseMessage response = await client.PostAsJsonAsync($"https://www.baratlenal.somee.com/api/v1/product", product);
                string responseBody = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    await swalToast.ToggleToast(SwalToast.Icon.error, SwalToast.ErrorMessages.Create);
                    throw new Exception($"Server error (HTTP {response.StatusCode}): {responseBody}");
                }

                await swalToast.ToggleToast(SwalToast.Icon.success, SwalToast.SuccessMessages.Create);
                navigationManager.NavigateTo("/product");
            }
            catch (Exception e)
            {
                Console.WriteLine($"Request error: {e.Message}");
            }
        }
    }

    protected void CancelCreation()
    {
        navigationManager.NavigateTo("/product");
    }
}