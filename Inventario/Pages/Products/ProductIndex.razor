@page "/product"
@inject NavigationManager navigationManager

<!--//Json imports-->
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Inventario.Pages.Products;
@using Inventario.Pages.Layout;
@using Access.API;

<div class="sticky top-0 z-10 pt-2 pb-1 bg-green-800">
    <div class="flex justify-around mb-2">
        <input @oninput="HandleInputChange" class="w-2/5 py-2 px-3 bg-white text-green-900 placeholder-green-900 border border-green-900 rounded-md focus:outline-none focus:ring focus:ring-green-900"
            type="search"
            placeholder="Buscar productos..." />
        <select @bind="selectedCategory" id="category" name="category" class="w-2/5 py-2 px-3 bg-white text-green-900 border border-green-900 rounded-md focus:outline-none focus:ring focus:ring-green-900">
            <option value="@CategoryType.ALL">Todos</option>
            <option value="@CategoryType.SODA">Gaseosa</option>
            <option value="@CategoryType.ALCOHOLIC">Trago</option>
            <option value="@CategoryType.SNACK">Mekato</option>
            <option value="@CategoryType.OTHER">Otros</option>
        </select>
    </div>
</div>

    <!-- PRODUCTOS -->
<section class="grid grid-cols-3 md:grid-cols-5 lg:grid-cols-6 xl:grid-cols-7 px-4 pt-4 m-92 md:p-6 gap-4">

    @if (ProductsResponse != null && ProductsResponse.Any())
    {
        @foreach (Product product in ProductsResponse.Where(FilterProduct))
        {
            <div @onclick="() => modal.Toggle(product.presentations, product.idProduct, product.name)" class="transition duration-500 ease-in-out hover:scale-110 bg-white cursor-pointer bg-white rounded-lg shadow-md shadow-green-800/20 overflow-hidden">
                <div class="m-2 p-2 bg-white rounded-lg">
                    <img src="/images/@(product.category).png"
                            alt="Product Image"
                            width="180"
                            height="180"
                            class="w-full object-cover aspect-square"
                            style="aspect-ratio: 1 / 1; object-fit: cover;" />
                </div>
                <div class="px-4 py-1">
                    <h3 class="text-balance group-hover:text-white text-center text-sm font-bold">@product.name</h3>
                    @switch (product.category)
                    {
                        case (int)CategoryType.SODA:
                            <p class="font-medium text-sm md:text-base text-slate-600 text-center">Gaseosa</p>
                            break;
                        case (int)CategoryType.ALCOHOLIC:
                            <p class="font-medium text-sm md:text-base text-slate-600 text-center">Trago</p>
                            break;
                        case (int)CategoryType.SNACK:
                            <p class="font-medium text-sm md:text-base text-slate-600 text-center">Mekato</p>
                            break;
                        case (int)CategoryType.DRINK:
                            <p class="font-medium text-sm md:text-base text-slate-600 text-center">Mekato</p>
                            break;
                        case (int)CategoryType.OTHER:
                            <p class="font-medium text-sm md:text-base text-slate-600 text-center">Otro</p>
                            break;
                    }
                </div>
            </div>
        }
    }
    else
    {
        for(int i = 0; i < 14; i++)
        {
            <div role="status" class="max-w-sm p-2 border border-green-200 rounded shadow animate-pulse">
                <div class="flex items-center justify-center h-48 mb-4 bg-green-300 rounded">
                    <svg class="w-10 h-10 text-green-200" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                        <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z" />
                        <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z" />
                    </svg>
                </div>
                <div class="h-2 bg-green-200 rounded-full mb-2.5"></div>
                <div class="h-2 bg-green-200 rounded-full mb-2.5"></div>
                <span class="sr-only">Loading...</span>
            </div>
        }
    }
</section>
    

<div class="fixed bottom-24 right-4">
    <button class="bg-green-800 text-white rounded-full p-4 shadow-md hover:bg-green-900 hover:text-white focus:outline-none focus:ring-2 focus:ring-green-00 focus:ring-opacity-50 flex items-center">
        <a href="/product/create" class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
            </svg>

            <h1>  Añadir producto</h1>
        </a>
    </button>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<CheckProductModal @ref=modal />
<SwalToast @ref=swalToast/>

@code {
    SwalToast swalToast;

    List<Product> ProductsResponse;
    private string searchText = string.Empty;
    private CategoryType selectedCategory = CategoryType.ALL;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient client = new HttpClient();
            ProductsResponse = await client.GetFromJsonAsync<List<Product>>("https://www.baratlenal.somee.com/api/v1/product");
            //StateHasChanged(); // Manually trigger UI update
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void HandleInputChange(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
    }

    private bool FilterProduct(Product product)
    {
        return (product.category == (int)selectedCategory || selectedCategory == CategoryType.ALL) &&
               (string.IsNullOrEmpty(searchText) || product.name.Contains(searchText, StringComparison.OrdinalIgnoreCase));
    }
}
