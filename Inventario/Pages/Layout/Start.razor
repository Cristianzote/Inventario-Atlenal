@page "/"
@using Inventario.Pages.Layout
@using ChartJs.Blazor.Common
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Inventario.Pages.Movements;
@using Access.API;

<div class="pb-24 bg-white">
    <div class="bg-white mx-auto w-full rounded-lg shadow-md">

        <!-- Plus Button (to add more presentations) -->
        <div class="6 flex w-full justify-center">
            <h1 class="text-green-900 mb-4 text-xl font-semibold">Tu inventario</h1>
        </div>

        <div class="flex w-full justify-center">
            @if (platform == "WinUI")
            {
                if (SalesResponse != null)
                {
                    <div class="flex w-full justify-center">
                        <div class="mb-24 w-5/6">
                            <Chart Config="_config"></Chart>
                        </div>
                    </div>
                }
            }
            else
            {
                if (SalesResponse != null)
                {
                    <div class="flex w-full justify-center">
                        <div class="mb-24 w-5/6">
                            <Chart Config="_config" Width="1" Height="2"></Chart>
                        </div>
                    </div>
                }
            }
        </div>


        <div class="bg-green-600 w-full">
            <div class="pt-2 flex w-full justify-center text-center text-lg font-bold">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 21v-7.5a.75.75 0 0 1 .75-.75h3a.75.75 0 0 1 .75.75V21m-4.5 0H2.36m11.14 0H18m0 0h3.64m-1.39 0V9.349M3.75 21V9.349m0 0a3.001 3.001 0 0 0 3.75-.615A2.993 2.993 0 0 0 9.75 9.75c.896 0 1.7-.393 2.25-1.016a2.993 2.993 0 0 0 2.25 1.016c.896 0 1.7-.393 2.25-1.015a3.001 3.001 0 0 0 3.75.614m-16.5 0a3.004 3.004 0 0 1-.621-4.72l1.189-1.19A1.5 1.5 0 0 1 5.378 3h13.243a1.5 1.5 0 0 1 1.06.44l1.19 1.189a3 3 0 0 1-.621 4.72M6.75 18h3.75a.75.75 0 0 0 .75-.75V13.5a.75.75 0 0 0-.75-.75H6.75a.75.75 0 0 0-.75.75v3.75c0 .414.336.75.75.75Z" />
                </svg>

                <p>CDI</p>
            </div>
            <div class="p-2 text-center text-sm">Cobertura de inventario</div>
        </div>
        <div class="relative w-full overflow-auto">
            <table class="border-green-300 w-full caption-bottom text-sm">
                <thead class="bg-green-600 text-lg">
                    <tr class="border-b transition-colors">
                        <th class="h-12 px-4 text-muted-foreground text-left align-middle font-medium">Producto</th>
                        <th class="h-12 px-4 text-muted-foreground text-left align-middle font-medium">Presentación</th>
                        <th class="h-12 px-4 text-muted-foreground text-left align-middle font-medium">Cobertura</th>
                    </tr>
                </thead>
                <tbody class="text-md">
                    @if (CoverageResponse != null)
                    {
                        foreach (Coverage coverage in CoverageResponse.OrderBy(c => c.days).ToList())
                        {
                            <tr class="h-12 border-b transition-colors hover:bg-green-500">
                                <td class="p-2 align-middle">@coverage.product</td>
                                <td class="p-2 align-middle">@coverage.presentation</td>
                                <td class="p-2 text-@(coverage.color) align-middle">@coverage.days dias</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

    </div>
</div>

@code {
    private LineConfig _config;
    private Sales SalesResponse;
    private List<Coverage> CoverageResponse;
    private IEnumerable<int> Outflows;
    private IEnumerable<int> Incomes;
    string platform = DeviceInfo.Current.Platform.ToString();

    protected override async Task OnInitializedAsync()
    {
        try
        {
        HttpClient client = new HttpClient();
            SalesResponse = await client.GetFromJsonAsync<Sales>($"https://www.baratlenal.somee.com/api/v1/stats/sales");
            CoverageResponse = await client.GetFromJsonAsync<List<Coverage>>($"https://www.baratlenal.somee.com/api/v1/stats/coverage");
            Console.WriteLine(CoverageResponse);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        if (SalesResponse != null)
        {
            Outflows = SalesResponse.outflow.Select(f => (int)f);
            Incomes = SalesResponse.income.Select(f => (int)f);
            InitializeChart();
        }
    }

    protected void InitializeChart()
    {
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = false,
                        Text = "Este mes"
                    }
                }
            };

        foreach (string date in SalesResponse.date)
        {
            _config.Data.Labels.Add(date);
        }

        var IncomeDataset = new LineDataset<int>
            {
                Label = "Salidas",
                BackgroundColor = "#16a34a",
                BorderColor = "#14532d",
                BorderWidth = 2
            };

        IncomeDataset.AddRange(Outflows);

        // Second dataset (line) with data points
        var OutflowDataset = new LineDataset<int>
            {
                Label = "Entradas",
                BackgroundColor = "#e11d48",
                BorderColor = "#881337",
                BorderWidth = 2
            };

        OutflowDataset.AddRange(Incomes);

        // Add datasets to the chart configuration
        _config.Data.Datasets.Add(IncomeDataset);
        _config.Data.Datasets.Add(OutflowDataset);
    }

}