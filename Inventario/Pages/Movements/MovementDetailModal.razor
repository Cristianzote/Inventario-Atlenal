@inject IJSRuntime Js
@using Access.API;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Globalization;
@using Inventario.Pages.Layout

<!-- Main modal -->
<div id="updateProductModal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-modal md:h-full">
    <div class="relative p-4 w-full max-w-5xl h-full md:h-auto">
        <!-- Modal content -->
        <div class="relative p-4 bg-green-900 rounded-lg shadow dark:bg-green-800 sm:p-5">
            <!-- Modal header -->
            <div class="flex justify-between items-center pb-2 rounded-t ">

                <h3 class="text-lg text-center font-semibold text-white">
                    Detalles del movimiento
                </h3>
                <div>
                    @if (TransactionData != null)
                    {
                        <button @onclick="()=>DownloadFile()" type="button" class="bg-green-500 text-white px-1 py-1 rounded-md hover:bg-green-600 ml-2" data-modal-toggle="updateProductModal">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m.75 12 3 3m0 0 3-3m-3 3v-6m-1.5-9H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                            </svg>
                            <span class="sr-only">Download bill</span>
                        </button>
                    }
                    <button id="closeButton" type="button" class="bg-red-500 text-white px-1 py-1 rounded-md hover:bg-red-600" data-modal-toggle="updateProductModal">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                        </svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                </div>
            </div>
            <!-- Modal body -->
            @if (TransactionData != null)
            {
                <div class="mb-4">
                    <div class="flex">
                        <label for="location-search" class="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white">Your Email</label>
                        <div class="relative w-full">
                            <div class="absolute inset-y-0 start-0 flex items-center ps-1 pointer-events-none">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="ml-1 size-6 text-green-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 0 1-2.25 2.25h-15a2.25 2.25 0 0 1-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25m19.5 0v.243a2.25 2.25 0 0 1-1.07 1.916l-7.5 4.615a2.25 2.25 0 0 1-2.36 0L3.32 8.91a2.25 2.25 0 0 1-1.07-1.916V6.75" />
                                </svg>
                            </div>
                            <input @bind=DestinyMail type="email" id="simple-search" class="bg-green-50 text-green-900 border border-green-300 rounded-md focus:outline-none focus:ring focus:ring-green-500 block w-full ps-10 p-2.5" placeholder="Correo de destino de factura electronica" required />
                            <button @onclick="SendEBill" class="absolute top-0 end-0 h-full p-2.5 text-sm font-medium text-white bg-green-500 rounded-e-lg border border-green-700 hover:bg-green-600 focus:ring-4 focus:outline-none focus:ring-green-300">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5" />
                                </svg>
                                <span class="sr-only">Enviar</span>
                            </button>
                        </div>
                    </div>
                </div>

                <table class="border-green-600 w-full font-sans mb-4">
                    <thead class="bg-green-600 text-green-950">
                        <tr class="border-b transition-colors">
                            <th class="p-1 align-middle">ID</th>
                            <th class="p-1 align-middle">Valor total</th>
                            <th class="p-1 align-middle">Tipo</th>
                            <th class="p-1 align-middle">Fecha</th>
                            <th class="p-1 align-middle">Mesa</th>
                            <th class="p-1 align-middle">Cover</th>
                        </tr>
                    </thead>
                    <tbody class="text-md bg-green-50">
                        <tr id="PresentationRow" class="h-12 border-b transition-colors hover:bg-green-500">
                            <td class="p-2 align-middle">@TransactionData.idTransaction.ToString()</td>
                            <td class="p-2 align-middle">@TransactionData.value.ToString("C0")</td>
                            <td class="p-2 align-middle">@(TransactionData.type == TransactionType.INCOME ? "Entrada" : "Salida")</td>
                            <td class="p-2 align-middle">@TransactionData.date.DateTime</td>
                            <td class="p-2 align-middle">@TransactionData.table.ToString()</td>
                            <td class="p-2 align-middle">@(TransactionData.cover == true ? "Sí" : "No")</td>
                        </tr>
                    </tbody>
                </table>

                <table class="border-green-600 w-full table-fixed font-sans">
                    <thead class="bg-green-600 text-green-950 uppercase">
                        <tr class="border-b transition-colors">
                            <th class="h-12 px-2 text-muted-foreground text-left align-middle truncate">Producto</th>
                            <th class="h-12 px-2 text-muted-foreground text-left align-middle truncate">Presentación</th>
                            @if (TransactionData.type == TransactionType.OUTPUT)
                            {
                                <th class="h-12 px-2 text-muted-foreground text-left align-middle truncate">Menudeada/trago</th>
                            }
                            <th class="h-12 px-2 text-muted-foreground text-left align-middle truncate">Cantidad</th>
                            <th class="h-12 px-2 text-muted-foreground text-left align-middle truncate">Precio individual</th>
                            <th class="h-12 px-2 text-muted-foreground text-left align-middle truncate">Precio total</th>
                        </tr>
                    </thead>
                    <tbody class="text-md bg-green-50">
                        @foreach (TransactionDetail detail in TransactionData.transactionDetail)
                        {
                            var currentProduct = products.Where(p => p.presentations.Any(pr => pr.idPresentation == detail.presentation)).FirstOrDefault();
                            var currentPresentation = currentProduct.presentations.Where(pt => pt.idPresentation == detail.presentation).FirstOrDefault();
                            var currentPrice = 0.0;

                            if (detail.detail)
                            {
                                if (TransactionData.cover && (currentPresentation.priceRetailCover > 1))
                                {
                                    currentPrice = currentPresentation.priceRetailCover;
                                }
                                else
                                {
                                    currentPrice = currentPresentation.priceRetail;
                                }
                            }
                            else
                            {
                                if (TransactionData.cover && (currentPresentation.priceOutputCover > 1))
                                {
                                    currentPrice = currentPresentation.priceOutputCover;
                                }
                                else
                                {
                                    currentPrice = currentPresentation.priceOutput;
                                }
                            }
                            <tr id="PresentationRow" class="h-12 border-b transition-colors hover:bg-green-500">
                                <td class="p-2 align-middle">@currentProduct.name</td>
                                <td class="p-2 align-middle">@currentPresentation.name</td>
                                @if (TransactionData.type == TransactionType.OUTPUT)
                                {
                                    <td class="p-2 align-middle">@(detail.detail == true ? "Sí" : "No")</td>
                                }
                                <td class="p-2 align-middle">@detail.quantity</td>
                                <td class="p-2 align-middle">@currentPrice.ToString("C")</td>
                                <td class="p-2 align-middle">@((currentPrice * detail.quantity).ToString("C0"))</td>
                            </tr>
                        }

                    </tbody>
                </table>
            }
            else
            {
                <div class="flex min-h-screen items-center justify-center w-full">
                    <div class="p-8 rounded-lg">
                        <svg aria-hidden="true" class="w-10 h-10 text-gray-200 fill-green-600 inline animate-spin dark:text-gray-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                        </svg>
                        <span class="sr-only">Cargando...</span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    window.openNewWindow = function (url) {
        window.open(url, '_blank');
    }
</script>

<SwalToast @ref=swalToast />

@code {
    Transaction TransactionData;
    List<Product> products;
    string DestinyMail = string.Empty;

    Inventario.Pages.Movements.MovementDetailModal modal;
    SwalToast swalToast;

    public void Toogle(Transaction TransactionData, List<Product> products)
    {
        this.TransactionData = TransactionData;
        this.products = products;
        Js.InvokeVoidAsync("ShowModal", "updateProductModal", "closeButton");
        StateHasChanged();
    }

    public async void DownloadFile()
    {
        await swalToast.ToggleToast(SwalToast.Icon.info, SwalToast.InfoMessages.Bill);
        string url = $"https://www.baratlenal.somee.com/api/v1/transaction/bill/{TransactionData.idTransaction}";
        await Js.InvokeVoidAsync("openNewWindow", url);
    }

    public async void SendEBill()
    {
        try
        {
            HttpClient client = new HttpClient();
            Transaction response = await client.GetFromJsonAsync<Transaction>($"https://www.baratlenal.somee.com/api/v1/transaction/SendEmail/{DestinyMail}/{TransactionData.idTransaction}");
            await swalToast.ToggleToast(SwalToast.Icon.success, SwalToast.SuccessMessages.Email);
            //StateHasChanged(); // Manually trigger UI update
        }
        catch (Exception ex)
        {
            await swalToast.ToggleToast(SwalToast.Icon.error, SwalToast.ErrorMessages.Email);
            Console.WriteLine(ex.Message);
        }
    }
}
