@page "/movements"
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Inventario.Pages.Movements;
@using Access.API;
@using System.Globalization;

@inject NavigationManager navigationManager;

<div class="bg-white mx-auto shadow-lg">
    <div class="top-0 pt-2 pb-1 bg-green-800 sticky z-10">
        <div class="mb-2 flex justify-around">
            
            <button @onclick="GoToCreateOutput" class="text-md bg-green-800 text-white p-4 flex items-center rounded-full font-medium shadow-md hover:bg-green-900 hover:text-white focus:outline-none focus:ring-2 focus:ring-green-800 focus:ring-opacity-50">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white mr-2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5m-13.5-9L12 3m0 0 4.5 4.5M12 3v13.5" />
                </svg>

                <p>Registrar salida</p>
            </button>
            <button @onclick="GoToCreateInflow" class="text-md bg-green-800 text-white p-4 flex items-center rounded-full font-medium shadow-md hover:bg-green-900 hover:text-white focus:outline-none focus:ring-2 focus:ring-green-800 focus:ring-opacity-50">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white mr-2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3" />
                </svg>

                <p>Registrar entrada</p>
            </button>
        </div>
        <div class="gap-1 flex justify-around">
            <button @onclick="()=>TypeFilter=0" class="bg-green-600 ring-offset-background bg-background h-10 px-4 py-1 relative flex inline-flex w-full items-center items-center justify-center overflow-auto whitespace-nowrap rounded text-lg font-medium transition-colors hover:bg-green-900 hover:text-white focus:outline-none focus:ring-2 focus:ring-green-600 focus:ring-opacity-50">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="hover:text-white">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 7.5 7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" />
                </svg>
                <p>Todos</p>
            </button>
            <button @onclick="()=>TypeFilter=TransactionType.OUTPUT" class="bg-green-600 ring-offset-background bg-background h-10 px-4 py-1 relative flex inline-flex w-full items-center items-center justify-center overflow-auto whitespace-nowrap rounded text-lg font-medium transition-colors hover:bg-green-900 hover:text-white focus:outline-none focus:ring-2 focus:ring-green-600 focus:ring-opacity-50">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="hover:text-white">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5m-13.5-9L12 3m0 0 4.5 4.5M12 3v13.5" />
                </svg>
                <p>Salidas</p>
            </button>
            <button @onclick="()=>TypeFilter=TransactionType.INCOME" class="bg-green-600 ring-offset-background bg-background h-10 px-4 py-1 relative flex inline-flex w-full items-center items-center justify-center overflow-auto whitespace-nowrap rounded text-lg font-medium transition-colors hover:bg-green-900 hover:text-white focus:outline-none focus:ring-2 focus:ring-green-600 focus:ring-opacity-50">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="hover:text-white">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3" />
                </svg>
                <p>Entradas</p>
            </button>
            <button class="w-32 bg-green-600 ring-offset-background bg-background h-10 px-4 py-1 relative flex inline-flex items-center items-center justify-center overflow-auto whitespace-nowrap rounded text-lg font-medium transition-colors hover:bg-green-900 hover:text-white focus:outline-none focus:ring-2 focus:ring-green-600 focus:ring-opacity-50">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="hover:text-white">
                    <polyline points="6 9 6 2 18 2 18 9"></polyline>
                    <path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path>
                    <rect width="12" height="8" x="6" y="14"></rect>
                </svg>
            </button>
        </div>
    </div>
    <div>
        <div class="relative w-full overflow-auto">
            @if (TransactionsResponse != null && TransactionsResponse.Any())
            {
                <table class="border-green-300 w-full caption-bottom text-sm mb-24">
                    <thead class="bg-green-600 text-lg">
                        <tr class="border-b transition-colors">
                            <th class="h-12 px-4 text-muted-foreground text-left align-middle text-center">Fecha</th>
                            <th class="h-12 px-4 text-muted-foreground text-left align-middle text-center">ID</th>
                            <th class="h-12 px-4 text-muted-foreground text-left align-middle text-center">Total</th>
                            <th class="h-12 px-4 text-muted-foreground text-left align-middle text-center">Tipo</th>
                        </tr>
                    </thead>
                    <tbody class="text-md">
                        @foreach (Transaction transaction in TransactionsResponse)
                        {
                            if (TypeFilter == 0 || transaction.type == TypeFilter)
                            {
                                <tr @onclick="() => modal.Toogle(transaction)" class="h-12 border-b transition-colors hover:bg-green-500 cursor-pointer">
                                    <td class="p-2 align-middle text-center">@FormatDate(transaction.date)</td>
                                    <td class="p-2 align-middle text-center">@transaction.idTransaction</td>
                                    <td class="p-2 align-middle text-center">$@FormatAsMoney((int)transaction.value)</td>
                                    <td class="p-2 align-middle text-center">@(transaction.type == TransactionType.INCOME ? "Entrada" : "Salida")</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="flex min-h-screen items-center justify-center w-full">
                    <div class="p-8 rounded-lg">
                        <svg aria-hidden="true" class="w-10 h-10 text-gray-200 fill-green-600 inline animate-spin dark:text-gray-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                        </svg>
                        <span class="sr-only">Cargando...</span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<MovementDetailModal @ref=modal />

@code {
    // Declare ProductsResponse at the component level
    List<Transaction> TransactionsResponse;
    TransactionType TypeFilter = 0;

    MovementDetailModal modal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient client = new HttpClient();
            List<Transaction> response = await client.GetFromJsonAsync<List<Transaction>>("http://www.baratlenal.somee.com/api/v1/transaction");
            TransactionsResponse = response.OrderByDescending(t => t.idTransaction).ToList();
            //StateHasChanged(); // Manually trigger UI update
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected string FormatDate(DateTimeOffset DATE)
    {
        // Sample DateTimeOffset
        //DateTimeOffset dateTimeOffset = new DateTimeOffset(2024, 7, 5, 2, 19, 59, TimeSpan.Zero);

        // Format DateTimeOffset to exclude the timezone offset (+00:00)
        string formattedDateTimeOffset = DATE.ToString("M/d/yyyy h:mm:ss tt");

        return formattedDateTimeOffset;
    }

    public static string FormatAsMoney(int value)
    {
        // Create a CultureInfo object for the desired culture
        var cultureInfo = new CultureInfo("es-CO"); // Spanish (Colombia) culture for example

        // Set custom number format
        cultureInfo.NumberFormat.CurrencyGroupSeparator = "'";
        cultureInfo.NumberFormat.CurrencyDecimalSeparator = ".";
        cultureInfo.NumberFormat.CurrencySymbol = ""; // Remove currency symbol
        cultureInfo.NumberFormat.CurrencyGroupSizes = new int[] { 3 }; // Groups of 3 digits

        // Format the value as currency and remove the leading space
        string formattedValue = value.ToString("N0", cultureInfo);
        return formattedValue.Trim();
    }

    protected void GoToCreateInflow()
    {
        navigationManager.NavigateTo("/movements/create/inflow");
    }

    protected void GoToCreateOutput()
    {
        navigationManager.NavigateTo("/movements/create/output");
    }
}