@page "/movements/create/{type}"

<!--//Json imports-->
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Inventario.Pages.Products;
@using Access.API;
@using System.Globalization;

@inject NavigationManager navigationManager;

<div class="flex h-screen">
    <div class="w-3/5 overflow-y-auto">

        <!-- Navbar -->
        @if (ProductResponse != null && ProductResponse.Any())
        {
            <div class="top-0 pt-2 pb-1 bg-green-800 sticky z-10">
                <div class="mb-2 flex justify-around">
                    <input @oninput="HandleInputChange" class="w-2/5 py-2 px-3 bg-white text-green-900 placeholder-green-900 border border-green-900 rounded-md focus:outline-none focus:ring focus:ring-green-900"
                           type="search"
                           placeholder="Buscar productos..." />
                    <select @bind="selectedCategory" id="category" name="category" class="w-2/5 py-2 px-3 bg-white text-green-900 border border-green-900 rounded-md focus:outline-none focus:ring focus:ring-green-900">
                        <option value="@CategoryType.ALL">Todos</option>
                        <option value="@CategoryType.SODA">Gaseosa</option>
                        <option value="@CategoryType.ALCOHOLIC">Trago</option>
                        <option value="@CategoryType.DRINK">Bebida</option>
                        <option value="@CategoryType.SNACK">Mekato</option>
                        <option value="@CategoryType.OTHER">Otros</option>
                    </select>
                </div>
            </div>

            <!-- Product -->
            <div class="gap-4 p-2 mb-24 mt-8 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
                @foreach (Product product in ProductResponse.Where(FilterProduct))
                {
                    <div @onclick="() => modal.Toogle(product, Type)" class="bg-white rounded-lg shadow-md overflow-hidden cursor-pointer shadow-md shadow-green-800/20 p-4">
                        <div class="p-2 bg-white rounded-lg">
                            <img src="/images/@(product.category).png"
                            alt="Product Image"
                            width="180"
                            height="180"
                                 class="aspect-square w-full object-cover"
                            style="aspect-ratio: 1 / 1; object-fit: cover;" />
                            </div>
                        <div class="p-4">
                            <h3 class="text-balance text-center text-sm">@product.name</h3>
                            @switch (product.category)
                            {
                                case (int)CategoryType.SODA:
                                    <p class="text-gray-500 text-center text-sm">Gaseosa</p>
                                    break;
                                case (int)CategoryType.ALCOHOLIC:
                                    <p class="text-gray-500 text-center text-sm">Trago</p>
                                    break;
                                case (int)CategoryType.SNACK:
                                    <p class="text-gray-500 text-center text-sm">Mekato</p>
                                    break;
                                case (int)CategoryType.DRINK:
                                    <p class="text-gray-500 text-center text-sm">Bebida</p>
                                    break;
                                case (int)CategoryType.OTHER:
                                    <p class="text-gray-500 text-center text-sm">Otro</p>
                                    break;
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="flex min-h-screen items-center justify-center w-full">
                <div class="p-8 rounded-lg">
                    <svg aria-hidden="true" class="w-10 h-10 text-gray-200 fill-green-600 inline animate-spin dark:text-gray-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                    </svg>
                    <span class="sr-only">Cargando...</span>
                </div>
            </div>
        }
    </div>

    <!-- Details -->
    <div class="bg-green-700 pb-24 w-2/5 overflow-y-auto sm:w-2/5">
        @if (transactionDetails.Any())
        {
            @for (int i = 0; i < transactionDetails.Length; i++ )
            {
                var localIndex = i; // Capture the current value of i
                <div class="p-3 space-y-1 sm:p-4">
                    <div class="bg-white p-3 flex flex-col items-center justify-between rounded-lg shadow-md sm:flex-row">
                        <div class="mb-2 sm:mb-0">
                            <h3 class="text-md font-medium">@GetProductName(transactionDetails[i].presentations.product)</h3>
                            <p class="text-gray-500">@transactionDetails[localIndex].presentations.name</p>
                            @if (Type == "inflow")
                            {
                                <p class="text-gray-500">$@FormatAsMoney(((int)transactionDetails[localIndex].presentations.priceIncome))</p>
                            }
                            else
                            {
                                <p class="text-gray-500">$@(transactionDetails[localIndex].detail == true ? FormatAsMoney(((int)transactionDetails[localIndex].presentations.priceRetail)) : FormatAsMoney(((int)transactionDetails[localIndex].presentations.priceOutput)))</p>
                            }
                        </div>
                        <div>
                            <div class="space-x-4 flex items-center">
                                <div class="space-x-2 flex items-center">
                                    <button @onclick="()=>ChangeQuantity(localIndex, false)" class="bg-green-600 px-1 py-1 rounded-l-md hover:bg-green-400">-</button>
                                    <input @bind="transactionDetails[localIndex].quantity" type="number" min="1" max="@transactionDetails[localIndex].presentations.stock" class="text-center accent-gray-100 appearance-auto forced-colors:appearance-auto h-8 w-8 bg-gray-100 text-green-900 border-green-300 rounded border focus:ring focus:ring-green-500">
                                    <button @onclick="()=>ChangeQuantity(localIndex, true)" class="bg-green-600 px-1 py-1 rounded-r-md hover:bg-green-400">+</button>
                                </div>
                                @if (platform == "WinUI")
                                {
                                    <button @onclick="()=>RemoveDetail(localIndex)" class="bg-red-500 text-white px-1 py-1 rounded-md hover:bg-red-600">Eliminar</button>
                                }
                                else
                                {
                                    <button @onclick="()=>RemoveDetail(localIndex)" class="bg-red-500 text-white px-1 py-1 rounded-md hover:bg-red-600">X</button>
                                }
                            </div>

                            <div class="space-x-4 mt-2 flex items-center">

                                @if (Type != "inflow")
                                {
                                    if (transactionDetails[localIndex].presentations.retailStockRatio > 1)
                                    {
                                        <input @bind="transactionDetails[localIndex].detail" id="detailSale" name="detailSale" type="checkbox" class="accent-green-700 appearance-auto forced-colors:appearance-auto h-4 w-4 bg-green-500 text-green-900 border-green-300 rounded border focus:ring focus:ring-green-500">
                                        <label class="text-green-900 text-sm">¿Venta menudeada / trago?</label>
                                    }
                                    else
                                    {
                                        <input @bind="transactionDetails[localIndex].detail" id="detailSale" name="detailSale" type="checkbox" class="accent-red-700 h-4 w-4 bg-green-500 text-green-900 border-green-300 rounded border focus:ring focus:ring-green-500" disabled>
                                        <label class="text-green-900 text-sm">¿Venta menudeada / trago?</label>
                                    }
                                }
                                
                            </div>

                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="flex min-h-screen items-center justify-center w-full">
                <div class="p-8 rounded-lg">
                    <h3 class="animate-bounce text-md font-medium text-white ">Añade productos para realizar el movimiento</h3>
                </div>
            </div>
        }
    </div>


    <!-- Pay check -->
    <div class="bottom-0 right-0 bg-green-800 py-2 px-6 mb-14 mr-2.5 fixed flex w-2/5 items-center justify-between place-items-end">
        <div class="pt-2 flex justify-center text-center text-lg font-bold">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-white">
                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 18.75a60.07 60.07 0 0 1 15.797 2.101c.727.198 1.453-.342 1.453-1.096V18.75M3.75 4.5v.75A.75.75 0 0 1 3 6h-.75m0 0v-.375c0-.621.504-1.125 1.125-1.125H20.25M2.25 6v9m18-10.5v.75c0 .414.336.75.75.75h.75m-1.5-1.5h.375c.621 0 1.125.504 1.125 1.125v9.75c0 .621-.504 1.125-1.125 1.125h-.375m1.5-1.5H21a.75.75 0 0 0-.75.75v.75m0 0H3.75m0 0h-.375a1.125 1.125 0 0 1-1.125-1.125V15m1.5 1.5v-.75A.75.75 0 0 0 3 15h-.75M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm3 0h.008v.008H18V10.5Zm-12 0h.008v.008H6V10.5Z" />
            </svg>
            <p class="text-white">Total: $@FormatAsMoney(((int)TotalPrice(transactionDetails)))</p>
        </div>
        <div class="space-x-4 flex">
            <div class="flex justify-end">
                <button @onclick="CancelMovement" type="button" class="mr-4 bg-red-500 text-white py-2 px-4 inline-block rounded-md font-semibold transition duration-300 hover:bg-red-700 focus:outline-none focus:ring focus:ring-red-200">Cancelar</button>
                <button @onclick="()=>CreateTransaction(transaction, transactionDetails)" type="submit" class="bg-green-500 text-white py-2 px-4 mr-4 inline-block rounded-md font-semibold transition duration-300 hover:bg-green-700 focus:outline-none focus:ring focus:ring-green-200">Proceder</button>
             </div>
        </div>
    </div>

</div>

<PresentationModal @ref=modal OnSelectedPresentation="HandleSelectedPresentation" />


@code {
    [Parameter]
    public string Type { get; set; }

    string platform = DeviceInfo.Current.Platform.ToString();

    List<Product> ProductResponse;
    TransactionDetail[] transactionDetails = [];
    Presentation[] SelectedPresentations = [];
    Transaction transaction = new Transaction{};

    //Searcha variables
    private string searchText = string.Empty;
    private CategoryType selectedCategory = CategoryType.ALL;

    //Page initialized
    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient client = new HttpClient();
            ProductResponse = await client.GetFromJsonAsync<List<Product>>($"http://www.baratlenal.somee.com/api/v1/product");

            //StateHasChanged(); // Manually trigger UI update
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    //Handle modal inputs
    private void HandleSelectedPresentation(Presentation PRESENTATION)
    {
        //Array.Resize(ref SelectedPresentations, SelectedPresentations.Length + 1);
        //SelectedPresentations[SelectedPresentations.Length - 1] = PRESENTATION;
        Array.Resize(ref transactionDetails, transactionDetails.Length + 1);
        transactionDetails[transactionDetails.Length - 1] = new TransactionDetail
            {
                presentation = PRESENTATION.idPresentation,
                presentations = PRESENTATION,
                quantity = 1,
                detail = false
        };
    }


    //Search filters
    //Text
    private void HandleInputChange(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
    }
    //Category
    private bool FilterProduct(Product product)
    {
        return (product.category == (int)selectedCategory || selectedCategory == CategoryType.ALL) &&
               (string.IsNullOrEmpty(searchText) || product.name.Contains(searchText, StringComparison.OrdinalIgnoreCase));
    }

    //
    private async Task CreateTransaction(Transaction TRANSACTION, TransactionDetail[] TRANSACTION_DETAIL)
    {
        var options = new JsonSerializerOptions
            {
                ReferenceHandler = ReferenceHandler.Preserve,
                WriteIndented = true
            };

        try
        {
            // Build transaction body
            TRANSACTION.transactionDetail = TRANSACTION_DETAIL.ToList();
            TRANSACTION.value = (int)TotalPrice(transactionDetails);
            TRANSACTION.type = Type != "inflow" ? TransactionType.OUTPUT : TransactionType.INCOME;

            // Serialize the transaction object to JSON
            var jsonTransaction = JsonSerializer.Serialize(TRANSACTION, options);

            // Debug: Print the JSON to ensure it's correct
            Console.WriteLine(jsonTransaction);

            var content = new StringContent(jsonTransaction, System.Text.Encoding.UTF8, "application/json");

            // Make petition
            HttpClient client = new HttpClient();
            HttpResponseMessage response = await client.PostAsJsonAsync($"http://www.baratlenal.somee.com/api/v1/transaction", TRANSACTION);

            // Optionally read the response content
            string responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseBody);

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"Server error (HTTP {response.StatusCode}): {responseBody}");
            }
            //If the transaction is succesful
            navigationManager.NavigateTo("/movements");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Request error: {e.Message}");
        }
    }

    private string GetProductName(int ID)
    {
        Product product = ProductResponse.FirstOrDefault(p => p.idProduct == ID);
        return product.name;
    }

    private double TotalPrice(TransactionDetail[] TRANSACTION_DETAILS)
    {
        double total = 0;
        foreach (TransactionDetail detail in TRANSACTION_DETAILS)
        {
            if (Type == "inflow")
            {
                total += detail.presentations.priceIncome * detail.quantity;
            }
            else
            {
                if (detail.detail == true)
                {
                    total += detail.presentations.priceRetail * detail.quantity;
                }
                else
                {
                    total += detail.presentations.priceOutput * detail.quantity;
                }
            }
        }
        return total;
    }

    private void ChangeQuantity(int index, bool ADDITION)
    {
        if (index >= 0 && index < transactionDetails.Length)
        {
            if (ADDITION)
            {
                transactionDetails[index].quantity++;
            }
            else
            {
                if (transactionDetails[index].quantity > 0)
                {
                    transactionDetails[index].quantity--;
                }
            }
        }
        else
        {
            Console.WriteLine("Index out of range");
        }
    }

    //
    private void RemoveDetail(int index)
    {
        var list = transactionDetails.ToList();
        list.RemoveAt(index);
        transactionDetails = list.ToArray();
    }

    private void CancelMovement()
    {
        navigationManager.NavigateTo("/movements");
    }

    public static string FormatAsMoney(int value)
    {
        // Create a CultureInfo object for the desired culture
        var cultureInfo = new CultureInfo("es-CO"); // Spanish (Colombia) culture for example

        // Set custom number format
        cultureInfo.NumberFormat.CurrencyGroupSeparator = "'";
        cultureInfo.NumberFormat.CurrencyDecimalSeparator = ".";
        cultureInfo.NumberFormat.CurrencySymbol = ""; // Remove currency symbol
        cultureInfo.NumberFormat.CurrencyGroupSizes = new int[] { 3 }; // Groups of 3 digits

        // Format the value as currency and remove the leading space
        string formattedValue = value.ToString("N0", cultureInfo);
        return formattedValue.Trim();
    }
}