@page "/stats/cogs"
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor
@using Inventario.Pages.Layout
@using ChartJs.Blazor.Common
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Inventario.Pages.Movements;
@using Access.API;

<div class="bg-green-800 w-full text-white">
    <div class="p-3 flex w-full justify-center text-center text-lg font-bold">
        <p>Costo de bienes vendidos</p>
    </div>
</div>

@if (platform == "WinUI")
{
    if (MonthlyRegisterResponse != null)
    {
        <div class="flex w-full justify-center">
            <div class="mb-24 w-5/6">
                <Chart Config="_config"></Chart>
            </div>
        </div>
    }
    else
    {
        <div role="status" class="w-full p-4 border border-green-200 rounded shadow animate-pulse md:p-6">
            <div class="h-2.5 bg-green-200 rounded-full w-full mb-2.5"></div>
            <div class="w-full h-2 mb-10 bg-green-200 rounded-full"></div>
            <div class="flex items-baseline mt-4 w-full">
                <div class="w-full bg-green-200 rounded-t-lg h-72 "></div>
                <div class="w-full h-56 ms-6 bg-green-200 rounded-t-lg"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-72 ms-6"></div>
                <div class="w-full h-64 ms-6 bg-green-200 rounded-t-lg"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-80 ms-6"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-72 ms-6"></div>
                <div class="w-full bg-red-200 rounded-t-lg h-80 ms-6"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-80 ms-6"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-72 ms-6"></div>
                <div class="w-full bg-red-200 rounded-t-lg h-80 ms-6"></div>
                <div class="w-full bg-red-200 rounded-t-lg h-80 ms-6"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-72 ms-6"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-80 ms-6"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-80 ms-6"></div>
                <div class="w-full bg-red-200 rounded-t-lg h-72 ms-6"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-80 ms-6"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-80 ms-6"></div>
                <div class="w-full bg-green-200 rounded-t-lg h-72 ms-6"></div>
                <div class="w-full bg-red-200 rounded-t-lg h-80 ms-6"></div>
            </div>
            <span class="sr-only">Cargando...</span>
        </div>
    }
}
else
{
    <div class="flex w-full justify-center">
        <div class="mb-24 w-5/6">
            <Chart Config="_config" Width="1" Height="2"></Chart>
        </div>
    </div>
}

<SwalToast @ref=swalToast />
@code {
    SwalToast swalToast;
    private LineConfig _config;
    List<MonthlyRegister> MonthlyRegisterResponse;
    string platform = DeviceInfo.Current.Platform.ToString();
    IEnumerable<int> COGSValues;
    IEnumerable<int> InitialInventories;
    IEnumerable<int> FinalInventories;
    IEnumerable<int> Purchases;
    IEnumerable<int> Expenses;
    IEnumerable<string> Dates;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient client = new HttpClient();
            MonthlyRegisterResponse = await client.GetFromJsonAsync<List<MonthlyRegister>>($"https://www.baratlenal.somee.com/api/v1/monthly");
        }
        catch (Exception ex)
        {
            await swalToast.ToggleToast(SwalToast.Icon.error, SwalToast.ErrorMessages.Api);
            Console.WriteLine(ex.Message);
        }

        if (MonthlyRegisterResponse != null)
        {
            CreateCOGS();
            InitializeChart();
        }
    }

    protected void InitializeChart()
    {
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = false,
                        Text = "Costo de bienes vendidos"
                    }
                }
            };

        // Labels (shared for both datasets)

        foreach (string color in Dates)
        {
            _config.Data.Labels.Add(color);
        }

        // COGS
        var cogsDataset = new LineDataset<int>
            {
                Label = "COGS",
                BackgroundColor = "#aacc00",
                BorderColor = "#80b918",
                BorderWidth = 2
            };

        cogsDataset.AddRange(COGSValues);

        // Initial inventory
        var initialInventoryDataset = new LineDataset<int>
            {
                Label = "Inv. inicial",
                BackgroundColor = "#1e6091",
                BorderColor = "#184e77",
                BorderWidth = 2
            };

        initialInventoryDataset.AddRange(InitialInventories);

        // Final inventory
        var finalInventoryDataset = new LineDataset<int>
            {
                Label = "Inv. final",
                BackgroundColor = "#168aad",
                BorderColor = "#1a759f",
                BorderWidth = 2
            };

        finalInventoryDataset.AddRange(FinalInventories);

        // Purchases
        var purchasesDataset = new LineDataset<int>
            {
                Label = "Compras",
                BackgroundColor = "#007f5f",
                BorderColor = "#2b9348",
                BorderWidth = 2
            };

        purchasesDataset.AddRange(Purchases);

        // Expenses
        var ExpensesDataset = new LineDataset<int>
            {
                Label = "Gastos",
                BackgroundColor = "#eeef20",
                BorderColor = "#bfd200",
                BorderWidth = 2
            };

        ExpensesDataset.AddRange(Expenses);

        // Add datasets to the chart configuration
        _config.Data.Datasets.Add(ExpensesDataset);
        _config.Data.Datasets.Add(purchasesDataset);
        _config.Data.Datasets.Add(cogsDataset);
        _config.Data.Datasets.Add(initialInventoryDataset);
        _config.Data.Datasets.Add(finalInventoryDataset);
    }

    public void CreateCOGS()
    {
        var last24Registers = MonthlyRegisterResponse
        .OrderByDescending(r => r.finalDate) // Sort by FinalDate to get the most recent ones
        .Take(24)
        .Reverse() // Reverse to maintain chronological order (oldest first)
        .ToList();

        InitialInventories = last24Registers.Select(r => r.initialInventory);
        FinalInventories = last24Registers.Select(r => r.finalInventory);
        Purchases = last24Registers.Select(r => r.purchases);
        Expenses = last24Registers.Select(r => r.expenses);
        Dates = last24Registers.Select(r => $"{r.initialDate:dddd d-MM-yyyy} - {r.finalDate:dddd d-MM-yyyy}");
        COGSValues = last24Registers.Select(r => r.initialInventory + r.purchases - r.finalInventory);
    }
}