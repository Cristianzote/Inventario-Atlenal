@page "/stats"
@using Inventario.Pages.Layout
@using ChartJs.Blazor.Common
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Inventario.Pages.Movements;
@using Access.API;

<div class="w-full flex justify-center">
    <div class="w-2/5 border-2 border-green-600 m-4 rounded-lg">
        <a href="/stats/cogs">
            <div class="w-full bg-green-600">
                <div class="text-center font-bold text-lg pt-2 flex justify-center w-full">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    <p>COGS</p>
                </div>
                <div class="text-center text-sm p-2">Costo de bienes vendidos</div>
            </div>
            @if (MonthlyRegisterResponse != null)
            {
                var cogs = GetCOGS();
                var color = string.Empty;

                if (cogs < 0)
                {
                    color = "red";
                }
                else if (cogs > 0)
                {
                    color = "green";
                }
                else
                {
                    color = "gray";
                }
                <div class="text-center font-bold text-lg pt-2 text-@color-500">
                        @cogs.ToString("C0")
                </div>
            }
            else
            {
                <div class="flex items-center justify-center w-full">
                    <div class="p-8 rounded-lg">
                        <svg aria-hidden="true" class="w-10 h-10 text-gray-200 fill-green-600 inline animate-spin dark:text-gray-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                        </svg>
                        <span class="sr-only">Cargando...</span>
                    </div>
                </div>
            }
        </a>
    </div>

    <div class="w-2/5 border-2 border-green-600 m-4 rounded-lg">
        <a href="/stats/cogs">
            <div class="w-full bg-green-600">
                <div class="text-center font-bold text-lg pt-2 flex justify-center w-full">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 12c0-1.232-.046-2.453-.138-3.662a4.006 4.006 0 0 0-3.7-3.7 48.678 48.678 0 0 0-7.324 0 4.006 4.006 0 0 0-3.7 3.7c-.017.22-.032.441-.046.662M19.5 12l3-3m-3 3-3-3m-12 3c0 1.232.046 2.453.138 3.662a4.006 4.006 0 0 0 3.7 3.7 48.656 48.656 0 0 0 7.324 0 4.006 4.006 0 0 0 3.7-3.7c.017-.22.032-.441.046-.662M4.5 12l3 3m-3-3-3 3" />
                    </svg>

                    <p>NRI</p>
                </div>
                <div class="text-center text-sm p-2">Nivel de rotación de inventario</div>
            </div>
        </a>
        @if (MonthlyRegisterResponse != null)
        {
            var nri = GetNRI();
            var color = string.Empty;
            if (nri < 0)
            {
                color = "red";
            }
            else if (nri > 0)
            {
                color = "green";
            }
            else
            {
                color = "gray";
            }
            <div class="text-center font-bold text-lg pt-2 text-@color-500">
                @nri.ToString("F2")
            </div>
        }
        else
        {
            <div class="flex items-center justify-center w-full">
                <div class="p-8 rounded-lg">
                    <svg aria-hidden="true" class="w-10 h-10 text-gray-200 fill-green-600 inline animate-spin dark:text-gray-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                    </svg>
                    <span class="sr-only">Cargando...</span>
                </div>
            </div>
        }
    </div>

</div>

<div class="w-full flex justify-center">
    <div class="w-4/5 border-2 border-green-600 m-4 rounded-lg">
        <div class="bg-green-600 w-full">
            <div class="pt-2 flex w-full justify-center text-center text-lg font-bold">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 21v-7.5a.75.75 0 0 1 .75-.75h3a.75.75 0 0 1 .75.75V21m-4.5 0H2.36m11.14 0H18m0 0h3.64m-1.39 0V9.349M3.75 21V9.349m0 0a3.001 3.001 0 0 0 3.75-.615A2.993 2.993 0 0 0 9.75 9.75c.896 0 1.7-.393 2.25-1.016a2.993 2.993 0 0 0 2.25 1.016c.896 0 1.7-.393 2.25-1.015a3.001 3.001 0 0 0 3.75.614m-16.5 0a3.004 3.004 0 0 1-.621-4.72l1.189-1.19A1.5 1.5 0 0 1 5.378 3h13.243a1.5 1.5 0 0 1 1.06.44l1.19 1.189a3 3 0 0 1-.621 4.72M6.75 18h3.75a.75.75 0 0 0 .75-.75V13.5a.75.75 0 0 0-.75-.75H6.75a.75.75 0 0 0-.75.75v3.75c0 .414.336.75.75.75Z" />
                </svg>

                <p>CDI</p>
            </div>
            <div class="p-2 text-center text-sm">Cobertura de inventario</div>
        </div>
        <div class="relative w-full overflow-auto">
            @if (CoverageResponse != null)
            {
                <table class="border-green-300 w-full caption-bottom text-sm">
                    <thead class="bg-green-600 text-lg">
                        <tr class="border-b transition-colors">
                            <th class="h-12 px-4 text-muted-foreground text-left align-middle font-medium">Producto</th>
                            <th class="h-12 px-4 text-muted-foreground text-left align-middle font-medium">Presentación</th>
                            <th class="h-12 px-4 text-muted-foreground text-left align-middle font-medium">Cobertura</th>
                        </tr>
                    </thead>
                    <tbody class="text-md">
                            @foreach (Coverage coverage in CoverageResponse.OrderBy(c => c.days).ToList())
                            {
                                <tr class="h-12 border-b transition-colors hover:bg-green-500">
                                    <td class="p-2 align-middle">@coverage.product</td>
                                    <td class="p-2 align-middle">@coverage.presentation</td>
                                    <td class="p-2 text-@(coverage.color) align-middle">@coverage.days dias</td>
                                </tr>
                            }
                    </tbody>
                </table>
            }
            else
            {
                <section role="status" class="w-full p-4 space-y-4 border border-green-200 divide-y divide-green-200 rounded shadow animate-pulse">
                    @for (var i = 0; i < 3; i++)
                    {
                        <div class="flex items-center justify-between pt-4 w-full">
                            <div>
                                <div class="h-2.5 bg-green-300 rounded-full w-24 mb-2.5"></div>
                                <div class="w-32 h-2 bg-green-200 rounded-full"></div>
                            </div>
                            <div class="h-2.5 bg-green-300 rounded-full "></div>
                        </div>
                        <span class="sr-only">Cargando...</span>
                    }
                </section>
            }
        </div>
    </div>
</div>

<SwalToast @ref=swalToast />

@code {
    SwalToast swalToast;

    private List<Coverage> CoverageResponse;
    private List<MonthlyRegister> MonthlyRegisterResponse;
    private MonthlyRegister LastRegister;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient client = new HttpClient();
            CoverageResponse = await client.GetFromJsonAsync<List<Coverage>>($"https://www.baratlenal.somee.com/api/v1/stats/coverage");
            MonthlyRegisterResponse = await client.GetFromJsonAsync<List<MonthlyRegister>>($"https://www.baratlenal.somee.com/api/v1/monthly");
            LastRegister = MonthlyRegisterResponse.LastOrDefault();
        }
        catch (Exception ex)
        {
            await swalToast.ToggleToast(SwalToast.Icon.error, SwalToast.ErrorMessages.Api);
            Console.WriteLine(ex.Message);
        }
    }

    public double GetCOGS()
    {
        return (LastRegister.initialInventory + LastRegister.purchases - LastRegister.finalInventory);
    }

    public float GetNRI()
    {
        var cogs = GetCOGS();
        var averageValue = (LastRegister.initialInventory + LastRegister.finalInventory) / 2;
        return (float)(cogs / averageValue);
    }
}